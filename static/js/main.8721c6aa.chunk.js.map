{"version":3,"sources":["components/calculateWinner.js","components/Square.js","components/Board.js","components/Game.js","serviceWorker.js","index.js"],"names":["calculateWinner","squares","lines","i","length","_lines$i","Object","slicedToArray","a","b","c","Square","props","react_default","createElement","className","onClick","value","Board","history","this","state","slice","stepNumber","xIsNext","setState","concat","step","_this","components_Square","renderSquare","React","Component","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","Array","fill","status","_this2","current","winner","moves","map","move","desc","key","jumpTo","components_Board","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","components_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8721c6aa.chunk.js","sourcesContent":["function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default calculateWinner;\r\n","import React from \"react\";\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport calculateWinner from \"./calculateWinner\";\r\n\r\nclass Board extends React.Component {\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0\r\n    });\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\nimport calculateWinner from \"./calculateWinner\";\nimport Board from \"./Board\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} onClick={i => this.handleClick(i)} />\n        </div>\n        <div className=\"game-info\">\n          <div className=\"title\">{status}</div>\n          <ol className=\"moves\">{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Game is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./components/Game\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}